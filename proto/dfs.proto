syntax = "proto3";

package dfs;

option go_package = "generated/dfspb";

// Enum for different request types
enum RequestType {
  HEARTBEAT = 0;
  ALLOCATE_STORAGE = 1;
  GET_FILE_LOCATIONS = 2;
  STORE_CHUNK = 3;
  RETRIEVE_CHUNK = 4;
  DELETE_FILE = 5;
  DELETE_CHUNK = 6;
  LIST_FILES = 7;
  GET_SYSTEM_INFO = 8;
  ADD_REPLICA = 9;
  REPORT_CORRUPTION = 10;
  MAP_REDUCE_JOB = 11;     // Client to Controller: Request to start a MapReduce job
  MAP_JOB = 12;            // Controller to Storage Node: Request to start a Map job on a chunk
  REDUCE_JOB = 13;         // Controller to Storage Node: Request to start a Reduce job
}

// Request message with oneof for different types of requests
message Request {
  RequestType type = 1;

  oneof request {
    HeartbeatRequest heartbeat = 3;
    AllocateStorageRequest allocate_storage = 4;
    GetFileLocationsRequest get_file_locations = 5;
    StoreChunkRequest store_chunk = 6;
    RetrieveChunkRequest retrieve_chunk = 7;
    DeleteFileRequest delete_file = 8;
    DeleteChunkRequest delete_chunk = 9;               // DeleteChunkRequest
    ListFilesRequest list_files = 10;
    GetSystemInfoRequest get_system_info = 11;
    AddReplicaRequest add_replica = 12;                // Add replica request
    ReportCorruptedChunkRequest report_corrupted_chunk = 13; // Report corruption request
    MapReduceJobRequest map_reduce_job = 14;           // MapReduce job request
    MapJobRequest map_job = 15;                        // Map job request for storage nodes
    ReduceJobRequest reduce_job = 16;                  // Reduce job request for storage nodes
  }
}

// Response message with oneof for different types of responses
message Response {
  RequestType type = 1;

  oneof response {
    HeartbeatResponse heartbeat = 3;
    AllocateStorageResponse allocate_storage = 4;
    GetFileLocationsResponse get_file_locations = 5;
    StoreChunkResponse store_chunk = 6;
    RetrieveChunkResponse retrieve_chunk = 7;
    DeleteFileResponse delete_file = 8;
    DeleteChunkResponse delete_chunk = 9;               // DeleteChunkResponse
    ListFilesResponse list_files = 10;
    GetSystemInfoResponse get_system_info = 11;
    AddReplicaResponse add_replica = 12;                // Add replica response
    ReportCorruptedChunkResponse report_corrupted_chunk = 13; // Report corruption response
    MapReduceJobResponse map_reduce_job = 14;           // MapReduce job response
    MapJobResponse map_job = 15;                        // Map job response from storage nodes
    ReduceJobResponse reduce_job = 16;                  // Reduce job response from storage nodes
  }
}

// Message for requesting a MapReduce job from client to controller
message MapReduceJobRequest {
    string job_id = 1;
    string input_file = 2;
    bytes plugin = 3;
    int32 reducer_num = 4; // Number of reducers for the job
}

// Message for requesting a Map job from controller to storage node
message MapJobRequest {
    string job_id = 1;                // Unique identifier for the MapReduce job
    string chunk_id = 2;              // Chunk to be processed by the Map job
    bytes plugin = 3;                 // Binary data of the combined MapReduce plugin file
    int32 reducer_num = 4;            // Number of reducers for this job
    int32 port = 5;                   // The port for mapper-reducer connection
    repeated StorageNodeInfo reducers = 6; // List of reducers for this job
}

// Response message from the storage node after processing a Map job
message MapJobResponse {
    string job_id = 1;            // Unique identifier for the MapReduce job
    string chunk_id = 2;          // Chunk that was processed
    bool success = 3;             // Indicates if the Map job was successful
    string error_message = 4;     // Error message, if any
}

// Message for requesting a Reduce job from controller to storage node
message ReduceJobRequest {
    string job_id = 1;        // Unique identifier for the MapReduce job
    string reducer_id = 2;
    int32   port = 3;            // The port this for mapper reducer connection
    int32  mapper_num = 4;     // Values associated with this key, grouped from Map output
    bytes   plugin = 5;       // Binary data of the reduce plugin file
}

// Response message from the storage node after processing a Reduce job
message ReduceJobResponse {
    string job_id = 1;             // Unique identifier for the MapReduce job
    string reducer_id = 2;          
    bool success = 3;              // Indicates if the Reduce job was successful
    string error_message = 4;      // Error message, if any
}

// Response message for MapReduce job request
message MapReduceJobResponse {
    string job_id = 1;
    bool success = 2;
    string error_message = 3;
}



// Messages for Heartbeat
message HeartbeatRequest {
  StorageNodeInfo node_info = 1;
}

message HeartbeatResponse {
  bool acknowledged = 1;
  string error_message = 2; // Optional error message for failure cases
}

// Messages for Storage Allocation
message AllocateStorageRequest {
  string filename = 1;
  int64 file_size = 2;
  int64 chunk_num = 3;
}

message AllocateStorageResponse {
  repeated ChunkAllocation chunk_allocations = 1;
  string error_message = 2; // Optional error message for failure cases
}

message ChunkAllocation {
  string chunk_id = 1;
  repeated StorageNodeInfo nodes = 2;
}

// Messages for File Location Retrieval
message GetFileLocationsRequest {
  string filename = 1;
}

message GetFileLocationsResponse {
  repeated ChunkAllocation chunk_locations = 1;
  string error_message = 2; // Optional error message for failure cases
}

// Messages for Chunk Operations
message StoreChunkRequest {
  string chunk_id = 1;
  bytes data = 2;
  string checksum = 3;
  repeated StorageNodeInfo nodes = 4;
}

message StoreChunkResponse {
  bool success = 1;
  string error_message = 2; // Optional error message for failure cases
}

message RetrieveChunkRequest {
  string chunk_id = 1;
}

message RetrieveChunkResponse {
  bytes data = 1;
  string checksum = 2;
  string error_message = 3; // Optional error message for failure cases
}

// Messages for Reporting Corrupted Chunks
message ReportCorruptedChunkRequest {
  string chunk_id = 1;
  string node_id = 2;
}

message ReportCorruptedChunkResponse {
  bool acknowledged = 1;
  StorageNodeInfo healthy_node = 2;
  string error_message = 3; // Optional error message for failure cases
}

// Messages for File Deletion
message DeleteFileRequest {
  string filename = 1;
}

message DeleteFileResponse {
  repeated ChunkAllocation chunk_locations = 1;
  string error_message = 2; // Optional error message for failure cases
}

// Messages for Chunk Deletion
message DeleteChunkRequest {
  string chunk_id = 1;
}

message DeleteChunkResponse {
  bool success = 1;
  string error_message = 2; // Optional error message for failure cases
}


// Messages for Listing Files
message ListFilesRequest {}

message ListFilesResponse {
  repeated string filenames = 1;
  string error_message = 2; // Optional error message for failure cases
}

// Messages for System Information Retrieval
message GetSystemInfoRequest {}

message GetSystemInfoResponse {
  repeated StorageNodeInfo active_nodes = 1;
  string error_message = 3; // Optional error message for failure cases
}

message StorageNodeInfo {
  string node_id = 1;
  string address = 2;
  int64 free_space = 3;
  int64 total_requests = 4;
}

// Messages for adding a replica
message AddReplicaRequest {
  string chunk_id = 1;                 // The ID of the chunk to replicate
  StorageNodeInfo target_node = 2;     // The node where the new replica will be created
}

// Response for adding a replica
message AddReplicaResponse {
  bool success = 1;                     // Indicates if the replica creation was successful
  string error_message = 2;             // Optional error message
}

message MapperFile {
    string file_name = 1;  // Name of the file
    string chunk_id = 2;   // Chunk ID for traceability
    bytes content = 3;     // File content as raw bytes
}
